package net.superblaubeere27.masxinlingvaj.postprocessor;

import java.util.ArrayList;
import java.util.Collections;
import net.superblaubeere27.masxinlingvaj.MLV;
import net.superblaubeere27.masxinlingvaj.compiler.MLVCompiler;
import net.superblaubeere27.masxinlingvaj.compiler.tree.CompilerClass;
import org.objectweb.asm.Label;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

public class LoaderAdderProstprocessor extends AbstractPostprocessor {

    @Override
    public void postProcess(MLVCompiler compiler) {
        // TODO: Relocate old clInit to native method

        CompilerClass injectClass = null;
        ClassNode injectClassNode = null;
        MethodNode clInit = null;

        ArrayList<CompilerClass> classes = new ArrayList<>(compiler.getIndex().getClasses());
        Collections.shuffle(classes);

        for (CompilerClass aClass : classes) {
            injectClass = aClass;
            injectClassNode = injectClass.getClassNode();
            clInit = checkForClinit(injectClassNode);
            if (clInit == null) {
                break;
            }
        }

        if (clInit != null || injectClassNode == null) {
            System.out.println("\nUnable to inject natives loader.\n");
            return;
        }

        clInit = new MethodNode(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null);
        injectClassNode.methods.add(clInit);

        addLoader(clInit, injectClassNode);

        injectClass.setModifiedFlag();

        System.out.println("\nInjected natives loader to " + injectClassNode.name + "\n");
    }

    private MethodNode checkForClinit(ClassNode classNode) {
        for (MethodNode method : classNode.methods) {
            if (method.name.equals("<clinit>")) {
                return method;
            }
        }

        return null;
    }

    @SuppressWarnings("DuplicatedCode")
    private void addLoader(MethodNode clInit, ClassNode injectClassNode) {
        Label label0 = new Label();
        Label label1 = new Label();
        Label label2 = new Label();
        Label label3 = new Label();
        Label label4 = new Label();
        Label label5 = new Label();
        Label label6 = new Label();
        Label label7 = new Label();
        Label label8 = new Label();
        Label label9 = new Label();
        Label label10 = new Label();
        Label label11 = new Label();
        Label label12 = new Label();
        Label label13 = new Label();
        Label label14 = new Label();
        Label label15 = new Label();
        Label label16 = new Label();
        Label label17 = new Label();
        Label label18 = new Label();
        Label label19 = new Label();
        Label label20 = new Label();
        Label label21 = new Label();
        Label label22 = new Label();
        Label label23 = new Label();
        Label label24 = new Label();
        Label label25 = new Label();
        Label label26 = new Label();
        Label label27 = new Label();
        Label label32 = new Label();
        Label label34 = new Label();
        Label label37 = new Label();
        Label label38 = new Label();
        Label label39 = new Label();
        Label label46 = new Label();
        Label label49 = new Label();
        Label label50 = new Label();
        Label label51 = new Label();
        Label label52 = new Label();
        Label label53 = new Label();
        Label label54 = new Label();
        Label label55 = new Label();

        clInit.visitCode();
        clInit.visitTryCatchBlock(label0, label1, label2, "java/io/IOException");
        clInit.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable");
        clInit.visitTryCatchBlock(label6, label7, label8, "java/lang/Throwable");
        clInit.visitTryCatchBlock(label6, label7, label9, null);
        clInit.visitTryCatchBlock(label10, label11, label12, "java/lang/Throwable");
        clInit.visitTryCatchBlock(label8, label13, label9, null);
        clInit.visitTryCatchBlock(label14, label15, label16, "java/lang/Throwable");
        clInit.visitTryCatchBlock(label17, label18, label19, "java/lang/Throwable");
        clInit.visitTryCatchBlock(label17, label18, label20, null);
        clInit.visitTryCatchBlock(label21, label22, label23, "java/lang/Throwable");
        clInit.visitTryCatchBlock(label19, label24, label20, null);
        clInit.visitTryCatchBlock(label25, label26, label27, "java/io/IOException");
        clInit.visitLdcInsn("os.arch");
        clInit.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
        clInit.visitLdcInsn("64");
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
        clInit.visitVarInsn(Opcodes.ISTORE, 0);
        clInit.visitLdcInsn("os.name");
        clInit.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
        clInit.visitVarInsn(Opcodes.ASTORE, 1);
        clInit.visitInsn(Opcodes.ACONST_NULL);
        clInit.visitVarInsn(Opcodes.ASTORE, 2);
        clInit.visitVarInsn(Opcodes.ILOAD, 0);
        clInit.visitJumpInsn(Opcodes.IFEQ, label32);
        clInit.visitVarInsn(Opcodes.ALOAD, 1);
        clInit.visitLdcInsn("win");
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
        clInit.visitJumpInsn(Opcodes.IFEQ, label34);
        clInit.visitLdcInsn((MLV.inJarNativesPath == null ? "/META-INF/natives/" : "/" + MLV.inJarNativesPath) + "win64.dll");
        clInit.visitVarInsn(Opcodes.ASTORE, 2);
        clInit.visitJumpInsn(Opcodes.GOTO, label32);
        clInit.visitLabel(label34);
        clInit.visitFrame(Opcodes.F_APPEND, 3, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 1);
        clInit.visitLdcInsn("linux");
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
        clInit.visitJumpInsn(Opcodes.IFEQ, label32);
        clInit.visitLdcInsn((MLV.inJarNativesPath == null ? "/META-INF/natives/" : "/" + MLV.inJarNativesPath) + "linux64.so");
        clInit.visitVarInsn(Opcodes.ASTORE, 2);
        clInit.visitLabel(label32);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 2);
        clInit.visitJumpInsn(Opcodes.IFNONNULL, label0);
        clInit.visitLabel(label37);
        clInit.visitTypeInsn(Opcodes.NEW, "java/lang/RuntimeException");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitTypeInsn(Opcodes.NEW, "java/lang/StringBuilder");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        clInit.visitLdcInsn("No natives found for ");
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        clInit.visitVarInsn(Opcodes.ALOAD, 1);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        clInit.visitVarInsn(Opcodes.ILOAD, 0);
        clInit.visitJumpInsn(Opcodes.IFEQ, label38);
        clInit.visitLdcInsn(" x86-64");
        clInit.visitJumpInsn(Opcodes.GOTO, label39);
        clInit.visitLabel(label38);
        clInit.visitFrame(Opcodes.F_FULL, 3, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 3, new Object[] {label37, label37, "java/lang/StringBuilder"});
        clInit.visitLdcInsn(" x86");
        clInit.visitLabel(label39);
        clInit.visitFrame(Opcodes.F_FULL, 3, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 4, new Object[] {label37, label37, "java/lang/StringBuilder", "java/lang/String"});
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;)V", false);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label0);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitLdcInsn("lib");
        clInit.visitInsn(Opcodes.ACONST_NULL);
        clInit.visitMethodInsn(Opcodes.INVOKESTATIC, "java/io/File", "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;", false);
        clInit.visitVarInsn(Opcodes.ASTORE, 3);
        clInit.visitVarInsn(Opcodes.ALOAD, 3);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/File", "deleteOnExit", "()V", false);
        clInit.visitVarInsn(Opcodes.ALOAD, 3);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
        clInit.visitJumpInsn(Opcodes.IFNE, label1);
        clInit.visitTypeInsn(Opcodes.NEW, "java/io/IOException");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitLdcInsn("A temp file was expected, but it wasn't created");
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/IOException", "<init>", "(Ljava/lang/String;)V", false);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label1);
        clInit.visitFrame(Opcodes.F_APPEND, 1, new Object[] {"java/io/File"}, 0, null);
        clInit.visitJumpInsn(Opcodes.GOTO, label25);
        clInit.visitLabel(label2);
        clInit.visitFrame(Opcodes.F_FULL, 3, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 1, new Object[] {"java/io/IOException"});
        clInit.visitVarInsn(Opcodes.ASTORE, 4);
        clInit.visitTypeInsn(Opcodes.NEW, "java/lang/UnsatisfiedLinkError");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitLdcInsn("Failed to create temp file");
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V", false);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label25);
        clInit.visitFrame(Opcodes.F_APPEND, 1, new Object[] {"java/io/File"}, 0, null);
        clInit.visitLdcInsn(Type.getType("L" + injectClassNode.name + ";"));
        clInit.visitVarInsn(Opcodes.ALOAD, 2);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
        clInit.visitVarInsn(Opcodes.ASTORE, 4);
        clInit.visitInsn(Opcodes.ACONST_NULL);
        clInit.visitVarInsn(Opcodes.ASTORE, 5);
        clInit.visitLabel(label17);
        clInit.visitTypeInsn(Opcodes.NEW, "java/io/FileOutputStream");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitVarInsn(Opcodes.ALOAD, 3);
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/io/File;)V", false);
        clInit.visitVarInsn(Opcodes.ASTORE, 6);
        clInit.visitInsn(Opcodes.ACONST_NULL);
        clInit.visitVarInsn(Opcodes.ASTORE, 7);
        clInit.visitLabel(label6);
        clInit.visitIntInsn(Opcodes.SIPUSH, 2048);
        clInit.visitIntInsn(Opcodes.NEWARRAY, Opcodes.T_BYTE);
        clInit.visitVarInsn(Opcodes.ASTORE, 8);
        clInit.visitLabel(label46);
        clInit.visitFrame(Opcodes.F_FULL, 9, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable", "[B"}, 0, new Object[] {});
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitMethodInsn(Opcodes.INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        clInit.visitTypeInsn(Opcodes.CHECKCAST, "java/io/InputStream");
        clInit.visitVarInsn(Opcodes.ALOAD, 8);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitVarInsn(Opcodes.ISTORE, 9);
        clInit.visitInsn(Opcodes.ICONST_M1);
        clInit.visitJumpInsn(Opcodes.IF_ICMPEQ, label7);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitVarInsn(Opcodes.ALOAD, 8);
        clInit.visitInsn(Opcodes.ICONST_0);
        clInit.visitVarInsn(Opcodes.ILOAD, 9);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/FileOutputStream", "write", "([BII)V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label46);
        clInit.visitLabel(label7);
        clInit.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitJumpInsn(Opcodes.IFNULL, label18);
        clInit.visitVarInsn(Opcodes.ALOAD, 7);
        clInit.visitJumpInsn(Opcodes.IFNULL, label49);
        clInit.visitLabel(label3);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
        clInit.visitLabel(label4);
        clInit.visitJumpInsn(Opcodes.GOTO, label18);
        clInit.visitLabel(label5);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 8);
        clInit.visitVarInsn(Opcodes.ALOAD, 7);
        clInit.visitVarInsn(Opcodes.ALOAD, 8);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label18);
        clInit.visitLabel(label49);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label18);
        clInit.visitLabel(label8);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 8);
        clInit.visitVarInsn(Opcodes.ALOAD, 8);
        clInit.visitVarInsn(Opcodes.ASTORE, 7);
        clInit.visitVarInsn(Opcodes.ALOAD, 8);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label9);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 10);
        clInit.visitLabel(label13);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitJumpInsn(Opcodes.IFNULL, label50);
        clInit.visitVarInsn(Opcodes.ALOAD, 7);
        clInit.visitJumpInsn(Opcodes.IFNULL, label51);
        clInit.visitLabel(label10);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
        clInit.visitLabel(label11);
        clInit.visitJumpInsn(Opcodes.GOTO, label50);
        clInit.visitLabel(label12);
        clInit.visitFrame(Opcodes.F_FULL, 11, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 11);
        clInit.visitVarInsn(Opcodes.ALOAD, 7);
        clInit.visitVarInsn(Opcodes.ALOAD, 11);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label50);
        clInit.visitLabel(label51);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
        clInit.visitLabel(label50);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 10);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label18);
        clInit.visitFrame(Opcodes.F_FULL, 6, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "java/io/InputStream", "java/lang/Throwable"}, 0, new Object[] {});
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitJumpInsn(Opcodes.IFNULL, label26);
        clInit.visitVarInsn(Opcodes.ALOAD, 5);
        clInit.visitJumpInsn(Opcodes.IFNULL, label52);
        clInit.visitLabel(label14);
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
        clInit.visitLabel(label15);
        clInit.visitJumpInsn(Opcodes.GOTO, label26);
        clInit.visitLabel(label16);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 6);
        clInit.visitVarInsn(Opcodes.ALOAD, 5);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label26);
        clInit.visitLabel(label52);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label26);
        clInit.visitLabel(label19);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 6);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitVarInsn(Opcodes.ASTORE, 5);
        clInit.visitVarInsn(Opcodes.ALOAD, 6);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label20);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 12);
        clInit.visitLabel(label24);
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitJumpInsn(Opcodes.IFNULL, label53);
        clInit.visitVarInsn(Opcodes.ALOAD, 5);
        clInit.visitJumpInsn(Opcodes.IFNULL, label54);
        clInit.visitLabel(label21);
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
        clInit.visitLabel(label22);
        clInit.visitJumpInsn(Opcodes.GOTO, label53);
        clInit.visitLabel(label23);
        clInit.visitFrame(Opcodes.F_FULL, 13, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "java/io/InputStream", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
        clInit.visitVarInsn(Opcodes.ASTORE, 13);
        clInit.visitVarInsn(Opcodes.ALOAD, 5);
        clInit.visitVarInsn(Opcodes.ALOAD, 13);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
        clInit.visitJumpInsn(Opcodes.GOTO, label53);
        clInit.visitLabel(label54);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
        clInit.visitLabel(label53);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 12);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label26);
        clInit.visitFrame(Opcodes.F_FULL, 4, new Object[] {Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File"}, 0, new Object[] {});
        clInit.visitJumpInsn(Opcodes.GOTO, label55);
        clInit.visitLabel(label27);
        clInit.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
        clInit.visitVarInsn(Opcodes.ASTORE, 4);
        clInit.visitTypeInsn(Opcodes.NEW, "java/lang/UnsatisfiedLinkError");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitTypeInsn(Opcodes.NEW, "java/lang/StringBuilder");
        clInit.visitInsn(Opcodes.DUP);
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        clInit.visitLdcInsn("Failed to copy file: ");
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        clInit.visitVarInsn(Opcodes.ALOAD, 4);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/IOException", "getMessage", "()Ljava/lang/String;", false);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        clInit.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V", false);
        clInit.visitInsn(Opcodes.ATHROW);
        clInit.visitLabel(label55);
        clInit.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        clInit.visitVarInsn(Opcodes.ALOAD, 3);
        clInit.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
        clInit.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "load", "(Ljava/lang/String;)V", false);
        clInit.visitInsn(Opcodes.RETURN);
        clInit.visitMaxs(4, 14);
        clInit.visitEnd();
        injectClassNode.visitEnd();
    }
}
